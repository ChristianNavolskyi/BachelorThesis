Automatically generated by Mendeley Desktop 1.18
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Preferences -> BibTeX in Mendeley Desktop

@article{Kasireddy2017a,
author = {Kasireddy, Preethi},
file = {:Users/navolskyi/Library/Application Support/Mendeley Desktop/Downloaded/Kasireddy - 2017 - A Beginner-Friendly Introduction to Containers , VMs and Docker What are “ containers ” and “ VMs ”.pdf:pdf},
pages = {1--16},
title = {{A Beginner-Friendly Introduction to Containers , VMs and Docker What are “ containers ” and “ VMs ”?}},
year = {2017}
}
@article{Phippya,
author = {Phippy, Introducing},
file = {:Users/navolskyi/Library/Application Support/Mendeley Desktop/Downloaded/Phippy - Unknown - The Children ' s Illustrated Guide to Kubernetes The Other Day ... The Children ' s Illustrated Guide to Kubernetes.pdf:pdf},
title = {{The Children ' s Illustrated Guide to Kubernetes The Other Day ... The Children ' s Illustrated Guide to Kubernetes}}
}
@article{Theoharis2005b,
abstract = {In this paper we benchmark three popular database repre- sentations of RDF/S schemata and data: (a) a schema-aware (i.e., one ta- ble per RDF/S class or property) with explicit (ISA) or implicit (NOISA) storage of subsumption relationships, (b) a schema-oblivious (i.e., a sin- gle table with triples of the form ?subject-predicate-object?), using (ID) or not (URI) identifiers to represent resources and (c) a hybrid of the schema-aware and schema-oblivious representations (i.e., one table per RDF/S meta-class by distinguishing also the range type of properties). Furthermore, we benchmark two common approaches for evaluating tax- onomic queries either on-the-fly (ISA, NOISA, Hybrid), or by precomput- ing the transitive closure of subsumption relationships (MatView, URI, ID). The main conclusion drawn from our experiments is that the evalua- tion of taxonomic queries is most efficient over RDF/S stores utilizing the Hybrid and MatView representations. Of the rest, schema-aware represen- tations (ISA, NOISA) exhibit overall better performance than URI,which is superior to that of ID, which exhibits the overall worst performance.},
author = {Theoharis, Yannis and Christophides, Vassilis and Karvounarakis, Grigoris},
file = {:Users/navolskyi/Library/Application Support/Mendeley Desktop/Downloaded/Theoharis, Christophides, Karvounarakis - 2005 - Benchmarking Database Representations of RDF S Stores.pdf:pdf},
journal = {Springer-Verlag Berlin Heidelb.},
pages = {685--701},
title = {{Benchmarking Database Representations of RDF / S Stores}},
year = {2005}
}
@article{Burns2016b,
abstract = {In the late 1980s and early 1990s, object-oriented pro- gramming revolutionized software development, popu- larizing the approach of building of applications as col- lections of modular components. Today we are seeing a similar revolution in distributed system development, with the increasing popularity of microservice archi- tectures built from containerized software components. Containers [15] [22] [1] [2] are particularly well-suited as the fundamental “object” in distributed systems by virtue of the walls they erect at the container bound- ary. As this architectural style matures, we are seeing the emergence of design patterns, much as we did for object- oriented programs, and for the same reason – thinking in terms of objects (or containers) abstracts away the low- level details of code, eventually revealing higher-level patterns that are common to a variety of applications and algorithms. This paper describes three types of design patterns that we have observed emerging in container-based dis- tributed systems: single-container patterns for container management, single-node patterns of closely cooperat- ing containers, and multi-node patterns for distributed algorithms. Like object-oriented patterns before them, these patterns for distributed computation encode best practices, simplify development, and make the systems where they are used more reliable.},
author = {Burns, Brendan},
file = {:Users/navolskyi/Library/Application Support/Mendeley Desktop/Downloaded/Burns - 2016 - Design patterns for container-based distributed systems.pdf:pdf},
journal = {USENIX Work. Hot Top. Cloud Comput.},
title = {{Design patterns for container-based distributed systems}},
year = {2016}
}
@article{Curry2012b,
abstract = {Within the operational phase buildings are now producing more data than ever before, from energy usage, utility information, occupancy patterns, weather data, etc. In order to manage a building holistically it is important to use knowledge from across these information sources. However, many barriers exist to their interoperability and there is little interaction between these islands of information. As part of moving building data to the cloud there is a critical need to reflect on the design of cloudbased data services and how they are designed from an interoperability perspective. If new cloud data services are designed in the same manner as traditional building management systems they will suffer from the data interoperability problems. Linked data technology leverages the existing open protocols and W3C standards of the Web architecture for sharing structured data on the web. In this paper we propose the use of linked data as an enabling technology for cloud-based building data services. The objective of linking building data in the cloud is to create an integrated well-connected graph of relevant information for managing a building. This paper describes the fundamentals of the approach and demonstrates the concept within a Small Medium sized Enterprise (SME) with an owner-occupied office building.},
author = {Curry, Edward and O'Donnell, James and Corry, Edward and Hasan, Souleiman and Keane, Marcus and O'Riain, Se{\'{a}}n},
file = {:Users/navolskyi/Library/Application Support/Mendeley Desktop/Downloaded/Curry et al. - 2012 - Linking building data in the cloud Integrating cross-domain building data using linked data.pdf:pdf},
journal = {Elsevier Ltd.},
keywords = {Building energy analysis,Building infromation model,Building management,Data Interoperability,Data es a service,Linked data},
mendeley-tags = {Building energy analysis,Building infromation model,Building management,Data Interoperability,Data es a service,Linked data},
pages = {206--219},
title = {{Linking building data in the cloud: Integrating cross-domain building data using linked data}},
url = {http://s3.amazonaws.com/academia.edu.documents/41524058/Linking{\_}building{\_}data{\_}in{\_}the{\_}cloud{\_}Integ20160124-26435-1mfp5qv.pdf?AWSAccessKeyId=AKIAIWOWYYGZ2Y53UL3A{\&}Expires=1499852371{\&}Signature=wJPbGo7WnEgFytJCGI4kj3qeipk{\%}253D{\&}response-content-disposition=inlin},
year = {2012}
}
@article{Slater2015a,
author = {Slater, Nate},
file = {:Users/navolskyi/Library/Application Support/Mendeley Desktop/Downloaded/Slater - 2015 - Using Containers to Build a Microservices Architecture.pdf:pdf},
pages = {1--12},
title = {{Using Containers to Build a Microservices Architecture}},
url = {https://medium.com/aws-activate-startup-blog/using-containers-to-build-a-microservices-architecture-6e1b8bacb7d1{\#}.6myity7wu},
year = {2015}
}
